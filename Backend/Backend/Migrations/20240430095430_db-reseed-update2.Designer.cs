// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240430095430_db-reseed-update2")]
    partial class dbreseedupdate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Models.ChangeLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewAssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NewDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewPriority")
                        .HasColumnType("int");

                    b.Property<string>("NewTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewWorkflowItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldAssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OldDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("OldDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OldPriority")
                        .HasColumnType("int");

                    b.Property<string>("OldTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldWorkflowItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<float>("Estimated")
                        .HasColumnType("real");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("TaskListId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TaskListId");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = "45b7476a-78cd-440b-9b8e-c70af4fe5518",
                            AssigneeId = "41e26ad0-472e-4e2a-ac44-74fee9837fa7",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8201),
                            CreatorId = "41e26ad0-472e-4e2a-ac44-74fee9837fa7",
                            Deadline = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Finish writing the quarterly report for the management team.",
                            Estimated = 3f,
                            Priority = 1,
                            TaskListId = "400759d2-60b2-42ed-a026-2bd318c859f3",
                            Title = "Complete Report",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8202)
                        },
                        new
                        {
                            Id = "4bcd9bdb-5b1c-4f2a-add8-be3aaf35b259",
                            AssigneeId = "91978fde-3e25-4fac-bff7-85b3d778fdbb",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8209),
                            CreatorId = "41e26ad0-472e-4e2a-ac44-74fee9837fa7",
                            Deadline = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Conduct a thorough review of the recent code changes in the development branch and provide feedback.",
                            Estimated = 6f,
                            Priority = 2,
                            TaskListId = "400759d2-60b2-42ed-a026-2bd318c859f3",
                            Title = "Review Code Changes",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8210)
                        },
                        new
                        {
                            Id = "ffd952c2-ab75-4ade-88c1-d50b9606a772",
                            AssigneeId = "d7f4dd75-92a0-42c6-b608-442a73060ff2",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8215),
                            CreatorId = "30b5ba9d-7faf-4658-a0c6-d7fc6c4f3168",
                            Deadline = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Follow up with the client regarding their recent inquiries and provide necessary assistance.",
                            Estimated = 1f,
                            Priority = 2,
                            TaskListId = "c06f8470-72f5-4280-be60-771812d853e1",
                            Title = "Call Client",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8216)
                        },
                        new
                        {
                            Id = "29ab1000-1808-47b0-b87d-fc7705e63dfb",
                            AssigneeId = "d7f4dd75-92a0-42c6-b608-442a73060ff2",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8303),
                            CreatorId = "30b5ba9d-7faf-4658-a0c6-d7fc6c4f3168",
                            Deadline = new DateTime(2024, 5, 3, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Coordinate a meeting with the project team to discuss the upcoming milestones and action items.",
                            Estimated = 2f,
                            Priority = 2,
                            TaskListId = "c06f8470-72f5-4280-be60-771812d853e1",
                            Title = "Schedule Meeting",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8304)
                        },
                        new
                        {
                            Id = "5f14132c-1492-4df4-97c7-2651503e6e67",
                            AssigneeId = "30b5ba9d-7faf-4658-a0c6-d7fc6c4f3168",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8309),
                            CreatorId = "30b5ba9d-7faf-4658-a0c6-d7fc6c4f3168",
                            Deadline = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Research current market trends and gather insights to inform strategic decisions for the next quarter.",
                            Estimated = 20f,
                            Priority = 0,
                            TaskListId = "c06f8470-72f5-4280-be60-771812d853e1",
                            Title = "Research Market Trends",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8309)
                        });
                });

            modelBuilder.Entity("Backend.Models.TaskList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("TaskLists");

                    b.HasData(
                        new
                        {
                            Id = "400759d2-60b2-42ed-a026-2bd318c859f3",
                            CreatorId = "41e26ad0-472e-4e2a-ac44-74fee9837fa7",
                            Description = "This list will contain programming tasks.",
                            Name = "Programming tasks"
                        },
                        new
                        {
                            Id = "c06f8470-72f5-4280-be60-771812d853e1",
                            CreatorId = "30b5ba9d-7faf-4658-a0c6-d7fc6c4f3168",
                            Description = "This list will contain management type tasks.",
                            Name = "Management tasks"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("Backend.Models.UserTaskList", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskListId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppUserId", "TaskListId");

                    b.HasIndex("TaskListId");

                    b.ToTable("UserTaskLists");

                    b.HasData(
                        new
                        {
                            AppUserId = "41e26ad0-472e-4e2a-ac44-74fee9837fa7",
                            TaskListId = "400759d2-60b2-42ed-a026-2bd318c859f3"
                        },
                        new
                        {
                            AppUserId = "41e26ad0-472e-4e2a-ac44-74fee9837fa7",
                            TaskListId = "c06f8470-72f5-4280-be60-771812d853e1"
                        },
                        new
                        {
                            AppUserId = "30b5ba9d-7faf-4658-a0c6-d7fc6c4f3168",
                            TaskListId = "400759d2-60b2-42ed-a026-2bd318c859f3"
                        },
                        new
                        {
                            AppUserId = "30b5ba9d-7faf-4658-a0c6-d7fc6c4f3168",
                            TaskListId = "c06f8470-72f5-4280-be60-771812d853e1"
                        },
                        new
                        {
                            AppUserId = "91978fde-3e25-4fac-bff7-85b3d778fdbb",
                            TaskListId = "400759d2-60b2-42ed-a026-2bd318c859f3"
                        },
                        new
                        {
                            AppUserId = "d7f4dd75-92a0-42c6-b608-442a73060ff2",
                            TaskListId = "c06f8470-72f5-4280-be60-771812d853e1"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserWorkLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("WorkTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("UserWorkLogs");

                    b.HasData(
                        new
                        {
                            Id = "331fa9b4-e7c2-4b4b-beec-49f8320d85b1",
                            AppUserId = "41e26ad0-472e-4e2a-ac44-74fee9837fa7",
                            LogDate = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8476),
                            TaskItemId = "45b7476a-78cd-440b-9b8e-c70af4fe5518",
                            WorkTime = 36000000000L
                        },
                        new
                        {
                            Id = "d1368840-e0ff-4d0f-9b34-52190d93eea0",
                            AppUserId = "91978fde-3e25-4fac-bff7-85b3d778fdbb",
                            LogDate = new DateTime(2024, 4, 30, 9, 54, 30, 181, DateTimeKind.Utc).AddTicks(8482),
                            TaskItemId = "4bcd9bdb-5b1c-4f2a-add8-be3aaf35b259",
                            WorkTime = 72000000000L
                        });
                });

            modelBuilder.Entity("Backend.Models.WorkflowItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("WorkflowItems");

                    b.HasData(
                        new
                        {
                            Id = "bde566ce-7225-4b10-abef-bb84f8497642",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "45b7476a-78cd-440b-9b8e-c70af4fe5518"
                        },
                        new
                        {
                            Id = "c7e953da-b66e-4c72-86bd-af498af4e718",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "45b7476a-78cd-440b-9b8e-c70af4fe5518"
                        },
                        new
                        {
                            Id = "49a6c827-aacb-44c5-85ca-3a04441e144e",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "4bcd9bdb-5b1c-4f2a-add8-be3aaf35b259"
                        },
                        new
                        {
                            Id = "e3a1d385-86bd-4a4c-b325-66da658d9d4f",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "4bcd9bdb-5b1c-4f2a-add8-be3aaf35b259"
                        },
                        new
                        {
                            Id = "3ef06ad5-5a2b-47bf-878f-add45ab6e43a",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "ffd952c2-ab75-4ade-88c1-d50b9606a772"
                        },
                        new
                        {
                            Id = "d2c9acbe-f2cb-4846-83ae-bc421cc3811d",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "ffd952c2-ab75-4ade-88c1-d50b9606a772"
                        },
                        new
                        {
                            Id = "99a21b35-73d8-4852-8c06-99d2a2f26a1d",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "29ab1000-1808-47b0-b87d-fc7705e63dfb"
                        },
                        new
                        {
                            Id = "f118a162-2ab2-48b0-800b-4fd2de4c645d",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "29ab1000-1808-47b0-b87d-fc7705e63dfb"
                        },
                        new
                        {
                            Id = "ec84d927-3038-4b5a-bfe7-a97f341d1fb5",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "5f14132c-1492-4df4-97c7-2651503e6e67"
                        },
                        new
                        {
                            Id = "1df56c23-d9b0-4fd4-b598-3d02a202d4ee",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "5f14132c-1492-4df4-97c7-2651503e6e67"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "41e26ad0-472e-4e2a-ac44-74fee9837fa7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9dd94ba0-04d9-4f3e-9581-9992743d3f26",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFNNa/wO/qmDWrNqJPLsqFgzAXxO0OcU7Zljrt4ObhceKmV2IIKogx8cevw/9xBiGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81e2a773-4f36-4318-812f-486d174f359e",
                            TwoFactorEnabled = false,
                            UserName = "john.doe",
                            FirstName = "John",
                            Image = "https://fastly.picsum.photos/id/237/200/200.jpg?hmac=zHUGikXUDyLCCmvyww1izLK3R3k8oRYBRiTizZEdyfI",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = "30b5ba9d-7faf-4658-a0c6-d7fc6c4f3168",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd54baed-d120-4621-b0b3-52f3c32368fe",
                            Email = "sarah.smith@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "SARAH.SMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEFW3DaCY8Uw/kBDx5fZGLmdU8ALHheb6iNGsGPYqqej7+JIIl7/QQYVbNXMywS1RQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce8ca5a5-14b3-4cd1-b088-9f457adeda65",
                            TwoFactorEnabled = false,
                            UserName = "sarah.smith",
                            FirstName = "Sarah",
                            Image = "https://fastly.picsum.photos/id/408/200/200.jpg?hmac=VJjKULX_XeyV5C9mbWyv6XTsG5EV-ZBsqbiQIi6xTeg",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = "91978fde-3e25-4fac-bff7-85b3d778fdbb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3550f689-3bfc-4d6c-9110-4ca6835cf90f",
                            Email = "mike.jones@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKE.JONES@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.JONES",
                            PasswordHash = "AQAAAAEAACcQAAAAEDxcWla205USYGPzYTXzEW8HiTZxIO63sSU1Ae30OEDmv34thsiKzj63AZtTfrclIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ca737ea-115c-4c54-bb11-4551f526b9a5",
                            TwoFactorEnabled = false,
                            UserName = "mike.jones",
                            FirstName = "Mike",
                            Image = "https://fastly.picsum.photos/id/256/200/200.jpg?hmac=MX3r8Dktr5b26lQqb5JB6sgLnCxSgt1KRm0F1eNDHCk",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = "d7f4dd75-92a0-42c6-b608-442a73060ff2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ec9a55a-d2ab-4962-b2ab-c35fe6d36537",
                            Email = "emily.williams@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "EMILY.WILLIAMS",
                            PasswordHash = "AQAAAAEAACcQAAAAEFWaUfrxe/sLfzfn0ABhHYl03f4eJ8x1jjWDY90ncZ8Pk4v1uogTGvCAYhEv11IrxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "604a0167-c5d0-419a-89b4-0dfc64eef478",
                            TwoFactorEnabled = false,
                            UserName = "emily.williams",
                            FirstName = "Emily",
                            Image = "https://fastly.picsum.photos/id/916/200/200.jpg?hmac=hEUrLG-ayFdIoyHKUwazT8SMEsVxWH9xGz4tx-e0cN0",
                            LastName = "Williams"
                        });
                });

            modelBuilder.Entity("Backend.Models.ChangeLog", b =>
                {
                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.HasOne("Backend.Models.TaskList", "TaskList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Backend.Models.UserTaskList", b =>
                {
                    b.HasOne("Backend.Models.AppUser", "AppUser")
                        .WithMany("AssignedTaskLists")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TaskList", "TaskList")
                        .WithMany("AssignedMembers")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Backend.Models.UserWorkLog", b =>
                {
                    b.HasOne("Backend.Models.AppUser", "AppUser")
                        .WithMany("LoggedWork")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("LoggedWork")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Backend.Models.WorkflowItem", b =>
                {
                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("WorkflowItems")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.Navigation("ChangeLogs");

                    b.Navigation("LoggedWork");

                    b.Navigation("WorkflowItems");
                });

            modelBuilder.Entity("Backend.Models.TaskList", b =>
                {
                    b.Navigation("AssignedMembers");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Backend.Models.AppUser", b =>
                {
                    b.Navigation("AssignedTaskLists");

                    b.Navigation("LoggedWork");
                });
#pragma warning restore 612, 618
        }
    }
}

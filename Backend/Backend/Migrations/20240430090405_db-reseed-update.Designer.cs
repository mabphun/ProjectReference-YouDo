// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240430090405_db-reseed-update")]
    partial class dbreseedupdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Models.ChangeLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewAssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NewDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewPriority")
                        .HasColumnType("int");

                    b.Property<string>("NewTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewWorkflowItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldAssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OldDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("OldDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OldPriority")
                        .HasColumnType("int");

                    b.Property<string>("OldTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldWorkflowItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<float>("Estimated")
                        .HasColumnType("real");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("TaskListId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TaskListId");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = "d2fd8100-c959-4562-b0f6-590044a82e7d",
                            AssigneeId = "7aa6b375-c7e4-4229-8edd-abaf8b1e1bd3",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8582),
                            CreatorId = "7aa6b375-c7e4-4229-8edd-abaf8b1e1bd3",
                            Deadline = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Finish writing the quarterly report for the management team.",
                            Estimated = 3f,
                            Priority = 1,
                            TaskListId = "0cb29329-e2c4-4ede-ad95-8e52a86a9f42",
                            Title = "Complete Report",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8583)
                        },
                        new
                        {
                            Id = "0c429c0a-c498-428e-ad7a-13a0dcf25395",
                            AssigneeId = "a142e4bc-e727-4e31-90ee-099c53851b70",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8591),
                            CreatorId = "7aa6b375-c7e4-4229-8edd-abaf8b1e1bd3",
                            Deadline = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Conduct a thorough review of the recent code changes in the development branch and provide feedback.",
                            Estimated = 6f,
                            Priority = 2,
                            TaskListId = "0cb29329-e2c4-4ede-ad95-8e52a86a9f42",
                            Title = "Review Code Changes",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8592)
                        },
                        new
                        {
                            Id = "79bbcea0-e6ce-4d6a-a9f3-c7db24bf4dcd",
                            AssigneeId = "6007eeb4-4568-487f-8efb-8543290591ed",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8599),
                            CreatorId = "ba09fe5b-d803-4b28-a18f-bf61b3fad4f1",
                            Deadline = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Follow up with the client regarding their recent inquiries and provide necessary assistance.",
                            Estimated = 1f,
                            Priority = 2,
                            TaskListId = "b7b9375f-143c-4403-b8bf-efe753fd98ee",
                            Title = "Call Client",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8600)
                        },
                        new
                        {
                            Id = "7410025a-0b45-4e29-98b2-49c8f39d7bfb",
                            AssigneeId = "6007eeb4-4568-487f-8efb-8543290591ed",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8606),
                            CreatorId = "ba09fe5b-d803-4b28-a18f-bf61b3fad4f1",
                            Deadline = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Coordinate a meeting with the project team to discuss the upcoming milestones and action items.",
                            Estimated = 2f,
                            Priority = 2,
                            TaskListId = "b7b9375f-143c-4403-b8bf-efe753fd98ee",
                            Title = "Schedule Meeting",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8606)
                        },
                        new
                        {
                            Id = "773b26c7-544e-4ca3-b0b5-f2096e87a491",
                            AssigneeId = "ba09fe5b-d803-4b28-a18f-bf61b3fad4f1",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8611),
                            CreatorId = "ba09fe5b-d803-4b28-a18f-bf61b3fad4f1",
                            Deadline = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Research current market trends and gather insights to inform strategic decisions for the next quarter.",
                            Estimated = 20f,
                            Priority = 0,
                            TaskListId = "b7b9375f-143c-4403-b8bf-efe753fd98ee",
                            Title = "Research Market Trends",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8612)
                        });
                });

            modelBuilder.Entity("Backend.Models.TaskList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("TaskLists");

                    b.HasData(
                        new
                        {
                            Id = "0cb29329-e2c4-4ede-ad95-8e52a86a9f42",
                            CreatorId = "7aa6b375-c7e4-4229-8edd-abaf8b1e1bd3",
                            Description = "This list will contain programming tasks.",
                            Name = "Programming tasks"
                        },
                        new
                        {
                            Id = "b7b9375f-143c-4403-b8bf-efe753fd98ee",
                            CreatorId = "ba09fe5b-d803-4b28-a18f-bf61b3fad4f1",
                            Description = "This list will contain management type tasks.",
                            Name = "Management tasks"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("Backend.Models.UserTaskList", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskListId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppUserId", "TaskListId");

                    b.HasIndex("TaskListId");

                    b.ToTable("UserTaskLists");

                    b.HasData(
                        new
                        {
                            AppUserId = "7aa6b375-c7e4-4229-8edd-abaf8b1e1bd3",
                            TaskListId = "0cb29329-e2c4-4ede-ad95-8e52a86a9f42"
                        },
                        new
                        {
                            AppUserId = "7aa6b375-c7e4-4229-8edd-abaf8b1e1bd3",
                            TaskListId = "b7b9375f-143c-4403-b8bf-efe753fd98ee"
                        },
                        new
                        {
                            AppUserId = "ba09fe5b-d803-4b28-a18f-bf61b3fad4f1",
                            TaskListId = "0cb29329-e2c4-4ede-ad95-8e52a86a9f42"
                        },
                        new
                        {
                            AppUserId = "ba09fe5b-d803-4b28-a18f-bf61b3fad4f1",
                            TaskListId = "b7b9375f-143c-4403-b8bf-efe753fd98ee"
                        },
                        new
                        {
                            AppUserId = "a142e4bc-e727-4e31-90ee-099c53851b70",
                            TaskListId = "0cb29329-e2c4-4ede-ad95-8e52a86a9f42"
                        },
                        new
                        {
                            AppUserId = "6007eeb4-4568-487f-8efb-8543290591ed",
                            TaskListId = "b7b9375f-143c-4403-b8bf-efe753fd98ee"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserWorkLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("WorkTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("UserWorkLogs");

                    b.HasData(
                        new
                        {
                            Id = "b5a8a977-809b-4d60-9899-97afbe0b064f",
                            AppUserId = "7aa6b375-c7e4-4229-8edd-abaf8b1e1bd3",
                            LogDate = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8795),
                            TaskItemId = "d2fd8100-c959-4562-b0f6-590044a82e7d",
                            WorkTime = 36000000000L
                        },
                        new
                        {
                            Id = "09ff9b61-5665-4f8d-adcd-20adba1e7bab",
                            AppUserId = "a142e4bc-e727-4e31-90ee-099c53851b70",
                            LogDate = new DateTime(2024, 4, 30, 9, 4, 5, 444, DateTimeKind.Utc).AddTicks(8808),
                            TaskItemId = "0c429c0a-c498-428e-ad7a-13a0dcf25395",
                            WorkTime = 72000000000L
                        });
                });

            modelBuilder.Entity("Backend.Models.WorkflowItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("WorkflowItems");

                    b.HasData(
                        new
                        {
                            Id = "22dbe941-682d-49c3-bc8b-f765dfa41769",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "d2fd8100-c959-4562-b0f6-590044a82e7d"
                        },
                        new
                        {
                            Id = "a7c281b4-f9fc-4f80-b85a-82366cb9cb5e",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "d2fd8100-c959-4562-b0f6-590044a82e7d"
                        },
                        new
                        {
                            Id = "74f085f5-9017-4bbe-a976-2f67924e66f8",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "0c429c0a-c498-428e-ad7a-13a0dcf25395"
                        },
                        new
                        {
                            Id = "83adcd97-b112-4a25-a304-195f350fc191",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "0c429c0a-c498-428e-ad7a-13a0dcf25395"
                        },
                        new
                        {
                            Id = "923fa8ae-c245-411a-9ab2-7c17d58fc722",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "79bbcea0-e6ce-4d6a-a9f3-c7db24bf4dcd"
                        },
                        new
                        {
                            Id = "282213fb-5fad-4473-8392-04ba79d2eb01",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "79bbcea0-e6ce-4d6a-a9f3-c7db24bf4dcd"
                        },
                        new
                        {
                            Id = "4b695506-757a-406a-bd21-38f4efc9068a",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "7410025a-0b45-4e29-98b2-49c8f39d7bfb"
                        },
                        new
                        {
                            Id = "4446a567-690f-4c8a-80b4-19db3c3ef522",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "7410025a-0b45-4e29-98b2-49c8f39d7bfb"
                        },
                        new
                        {
                            Id = "c1eb92c5-36c7-4f34-a8cd-6790f3366486",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "773b26c7-544e-4ca3-b0b5-f2096e87a491"
                        },
                        new
                        {
                            Id = "e4fadc1b-5dc6-4c85-b496-9c2240036a11",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "773b26c7-544e-4ca3-b0b5-f2096e87a491"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "7aa6b375-c7e4-4229-8edd-abaf8b1e1bd3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "207ad3ea-d247-41c8-b9bd-31625ca2c756",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAECRFw0eh48sXd9RgdSPHb56FbpJbWP0utnQ6vNUOEII4U3RsfAaHygD+XhoRp7KI1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "634af213-371b-4184-8d70-9bfbd6529f1d",
                            TwoFactorEnabled = false,
                            UserName = "john.doe",
                            FirstName = "John",
                            Image = "https://fastly.picsum.photos/id/237/200/200.jpg?hmac=zHUGikXUDyLCCmvyww1izLK3R3k8oRYBRiTizZEdyfI",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = "ba09fe5b-d803-4b28-a18f-bf61b3fad4f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b18e9bb3-3f43-4882-b0f2-8e130c1d9cb8",
                            Email = "sarah.smith@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "SARAH.SMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEPGXrvjRIn4LHrosz12YWf7rsQByKMz/7M9Gr9lid8rrXS0qyngVpkHmnpVPALWHpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41682cf5-4719-4492-83fd-e515bbb3d36c",
                            TwoFactorEnabled = false,
                            UserName = "sarah.smith",
                            FirstName = "Sarah",
                            Image = "https://fastly.picsum.photos/id/408/200/200.jpg?hmac=VJjKULX_XeyV5C9mbWyv6XTsG5EV-ZBsqbiQIi6xTeg",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = "a142e4bc-e727-4e31-90ee-099c53851b70",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f25d628-7939-4978-90b1-2679fe9baf49",
                            Email = "mike.jones@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKE.JONES@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.JONES",
                            PasswordHash = "AQAAAAEAACcQAAAAELprAFIUCeTxC5XcPwkl/83Agu0Sm1e8VesztTLRTUtPY0lAqzas6Jena3ekw2KAJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17fdb3f4-8ad8-4a71-b7f9-17539fad5d09",
                            TwoFactorEnabled = false,
                            UserName = "mike.jones",
                            FirstName = "Mike",
                            Image = "https://fastly.picsum.photos/id/256/200/200.jpg?hmac=MX3r8Dktr5b26lQqb5JB6sgLnCxSgt1KRm0F1eNDHCk",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = "6007eeb4-4568-487f-8efb-8543290591ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9516cd33-6997-4689-a1b6-5a23b5ae0864",
                            Email = "emily.williams@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "EMILY.WILLIAMS",
                            PasswordHash = "AQAAAAEAACcQAAAAEAll/09lVqw1Pt8hcpDGkmc5JM7165ekNnpeKLxOKeVgMzbgwd5Uvqfc3jzye7Tsew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "532ca569-fed9-409f-abb8-7f45e764f458",
                            TwoFactorEnabled = false,
                            UserName = "emily.williams",
                            FirstName = "Emily",
                            Image = "https://fastly.picsum.photos/id/916/200/200.jpg?hmac=hEUrLG-ayFdIoyHKUwazT8SMEsVxWH9xGz4tx-e0cN0",
                            LastName = "Williams"
                        });
                });

            modelBuilder.Entity("Backend.Models.ChangeLog", b =>
                {
                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.HasOne("Backend.Models.TaskList", "TaskList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Backend.Models.UserTaskList", b =>
                {
                    b.HasOne("Backend.Models.AppUser", "AppUser")
                        .WithMany("AssignedTaskLists")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TaskList", "TaskList")
                        .WithMany("AssignedMembers")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Backend.Models.UserWorkLog", b =>
                {
                    b.HasOne("Backend.Models.AppUser", "AppUser")
                        .WithMany("LoggedWork")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("LoggedWork")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Backend.Models.WorkflowItem", b =>
                {
                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("WorkflowItems")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.Navigation("ChangeLogs");

                    b.Navigation("LoggedWork");

                    b.Navigation("WorkflowItems");
                });

            modelBuilder.Entity("Backend.Models.TaskList", b =>
                {
                    b.Navigation("AssignedMembers");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Backend.Models.AppUser", b =>
                {
                    b.Navigation("AssignedTaskLists");

                    b.Navigation("LoggedWork");
                });
#pragma warning restore 612, 618
        }
    }
}

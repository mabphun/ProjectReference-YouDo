// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240430100628_db-reseed-update4")]
    partial class dbreseedupdate4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Models.ChangeLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewAssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NewDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewPriority")
                        .HasColumnType("int");

                    b.Property<string>("NewTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewWorkflowItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldAssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OldDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("OldDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OldPriority")
                        .HasColumnType("int");

                    b.Property<string>("OldTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldWorkflowItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<float>("Estimated")
                        .HasColumnType("real");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("TaskListId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TaskListId");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = "7d62e7e9-fb02-43e4-bda6-a63df8a3d356",
                            AssigneeId = "41cb914a-6181-4ed4-9c13-e1127f23649b",
                            CreatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5408),
                            CreatorId = "41cb914a-6181-4ed4-9c13-e1127f23649b",
                            Deadline = new DateTime(2024, 5, 4, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Finish writing the quarterly report for the management team.",
                            Estimated = 3f,
                            Priority = 1,
                            TaskListId = "3d4c6254-b3bc-4026-b39d-15f7ecc26c0d",
                            Title = "Complete Report",
                            UpdatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5409)
                        },
                        new
                        {
                            Id = "6d384a1c-93e1-47c6-b1e7-6da3bb3acfdd",
                            AssigneeId = "8014824c-2c7d-4fb4-8f8e-ccb98dc32175",
                            CreatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5422),
                            CreatorId = "41cb914a-6181-4ed4-9c13-e1127f23649b",
                            Deadline = new DateTime(2024, 4, 30, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Conduct a thorough review of the recent code changes in the development branch and provide feedback.",
                            Estimated = 6f,
                            Priority = 2,
                            TaskListId = "3d4c6254-b3bc-4026-b39d-15f7ecc26c0d",
                            Title = "Review Code Changes",
                            UpdatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5422)
                        },
                        new
                        {
                            Id = "fe40ba57-2f09-4958-b380-9d68998aa9b2",
                            AssigneeId = "1b4e5e8e-9a5a-45c8-b3d7-26a06aa64df6",
                            CreatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5430),
                            CreatorId = "c7564854-eae4-41bc-b4bc-d9ed0758ba92",
                            Deadline = new DateTime(2024, 5, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Follow up with the client regarding their recent inquiries and provide necessary assistance.",
                            Estimated = 1f,
                            Priority = 2,
                            TaskListId = "b97beeee-4450-4348-afd7-c327ac086e6d",
                            Title = "Call Client",
                            UpdatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            Id = "7c0e3772-7de1-4ca3-a2c1-6dd6f19c8532",
                            AssigneeId = "1b4e5e8e-9a5a-45c8-b3d7-26a06aa64df6",
                            CreatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5438),
                            CreatorId = "c7564854-eae4-41bc-b4bc-d9ed0758ba92",
                            Deadline = new DateTime(2024, 5, 3, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Coordinate a meeting with the project team to discuss the upcoming milestones and action items.",
                            Estimated = 2f,
                            Priority = 2,
                            TaskListId = "b97beeee-4450-4348-afd7-c327ac086e6d",
                            Title = "Schedule Meeting",
                            UpdatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5438)
                        },
                        new
                        {
                            Id = "09a508e7-e6f5-4276-ad14-632de29ab5cf",
                            AssigneeId = "c7564854-eae4-41bc-b4bc-d9ed0758ba92",
                            CreatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5445),
                            CreatorId = "c7564854-eae4-41bc-b4bc-d9ed0758ba92",
                            Deadline = new DateTime(2024, 5, 9, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Research current market trends and gather insights to inform strategic decisions for the next quarter.",
                            Estimated = 20f,
                            Priority = 0,
                            TaskListId = "b97beeee-4450-4348-afd7-c327ac086e6d",
                            Title = "Research Market Trends",
                            UpdatedAt = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5446)
                        });
                });

            modelBuilder.Entity("Backend.Models.TaskList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("TaskLists");

                    b.HasData(
                        new
                        {
                            Id = "3d4c6254-b3bc-4026-b39d-15f7ecc26c0d",
                            CreatorId = "41cb914a-6181-4ed4-9c13-e1127f23649b",
                            Description = "This list will contain programming tasks.",
                            Name = "Programming tasks"
                        },
                        new
                        {
                            Id = "b97beeee-4450-4348-afd7-c327ac086e6d",
                            CreatorId = "c7564854-eae4-41bc-b4bc-d9ed0758ba92",
                            Description = "This list will contain management type tasks.",
                            Name = "Management tasks"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("Backend.Models.UserTaskList", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskListId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppUserId", "TaskListId");

                    b.HasIndex("TaskListId");

                    b.ToTable("UserTaskLists");

                    b.HasData(
                        new
                        {
                            AppUserId = "41cb914a-6181-4ed4-9c13-e1127f23649b",
                            TaskListId = "3d4c6254-b3bc-4026-b39d-15f7ecc26c0d"
                        },
                        new
                        {
                            AppUserId = "41cb914a-6181-4ed4-9c13-e1127f23649b",
                            TaskListId = "b97beeee-4450-4348-afd7-c327ac086e6d"
                        },
                        new
                        {
                            AppUserId = "c7564854-eae4-41bc-b4bc-d9ed0758ba92",
                            TaskListId = "3d4c6254-b3bc-4026-b39d-15f7ecc26c0d"
                        },
                        new
                        {
                            AppUserId = "c7564854-eae4-41bc-b4bc-d9ed0758ba92",
                            TaskListId = "b97beeee-4450-4348-afd7-c327ac086e6d"
                        },
                        new
                        {
                            AppUserId = "8014824c-2c7d-4fb4-8f8e-ccb98dc32175",
                            TaskListId = "3d4c6254-b3bc-4026-b39d-15f7ecc26c0d"
                        },
                        new
                        {
                            AppUserId = "1b4e5e8e-9a5a-45c8-b3d7-26a06aa64df6",
                            TaskListId = "b97beeee-4450-4348-afd7-c327ac086e6d"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserWorkLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("WorkTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("UserWorkLogs");

                    b.HasData(
                        new
                        {
                            Id = "455b36fb-15c2-48f4-9e0e-e05f23b9050e",
                            AppUserId = "41cb914a-6181-4ed4-9c13-e1127f23649b",
                            LogDate = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5526),
                            TaskItemId = "7d62e7e9-fb02-43e4-bda6-a63df8a3d356",
                            WorkTime = 36000000000L
                        },
                        new
                        {
                            Id = "fd9ff94c-22e8-4799-bfa7-7c9f0558cf0f",
                            AppUserId = "41cb914a-6181-4ed4-9c13-e1127f23649b",
                            LogDate = new DateTime(2024, 4, 22, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5564),
                            TaskItemId = "7d62e7e9-fb02-43e4-bda6-a63df8a3d356",
                            WorkTime = 180000000000L
                        },
                        new
                        {
                            Id = "8186e32b-d96c-4b0f-a6e3-2d171616b79c",
                            AppUserId = "8014824c-2c7d-4fb4-8f8e-ccb98dc32175",
                            LogDate = new DateTime(2024, 4, 30, 10, 6, 27, 962, DateTimeKind.Utc).AddTicks(5531),
                            TaskItemId = "6d384a1c-93e1-47c6-b1e7-6da3bb3acfdd",
                            WorkTime = 72000000000L
                        });
                });

            modelBuilder.Entity("Backend.Models.WorkflowItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("WorkflowItems");

                    b.HasData(
                        new
                        {
                            Id = "f5d81bc2-847b-4771-9a94-34ba9f32aa44",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "7d62e7e9-fb02-43e4-bda6-a63df8a3d356"
                        },
                        new
                        {
                            Id = "41de2c77-619b-4796-9f61-5188f8c0f5e9",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "7d62e7e9-fb02-43e4-bda6-a63df8a3d356"
                        },
                        new
                        {
                            Id = "028ee1f6-b542-4faf-8496-1edefb5c6642",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "6d384a1c-93e1-47c6-b1e7-6da3bb3acfdd"
                        },
                        new
                        {
                            Id = "899a12b2-2312-4bfc-827c-6fa7588d0b07",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "6d384a1c-93e1-47c6-b1e7-6da3bb3acfdd"
                        },
                        new
                        {
                            Id = "2d74c080-6f2d-429b-999c-56885ea8afa8",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "fe40ba57-2f09-4958-b380-9d68998aa9b2"
                        },
                        new
                        {
                            Id = "c4c69cbf-db55-4202-9321-e70f94cee9c4",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "fe40ba57-2f09-4958-b380-9d68998aa9b2"
                        },
                        new
                        {
                            Id = "62996b8d-7e40-41bc-8ab6-2232505941fb",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "7c0e3772-7de1-4ca3-a2c1-6dd6f19c8532"
                        },
                        new
                        {
                            Id = "cb597947-b9eb-4295-9f1b-815d6b960fb6",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "7c0e3772-7de1-4ca3-a2c1-6dd6f19c8532"
                        },
                        new
                        {
                            Id = "af85af69-94cc-4324-8377-202d91bbc7b1",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "09a508e7-e6f5-4276-ad14-632de29ab5cf"
                        },
                        new
                        {
                            Id = "32095be3-f765-4984-8f17-ab1d7310956c",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "09a508e7-e6f5-4276-ad14-632de29ab5cf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "41cb914a-6181-4ed4-9c13-e1127f23649b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15bc58df-2bca-4114-9aab-0ab0073d4a6f",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEN9yHa97d5a1rlnW6psPtIBor7vldgYv70fIpqVKRjfKWq2WdO8se7/TsXjlS8BkSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44458690-c32a-4727-a86b-98d4fc37f795",
                            TwoFactorEnabled = false,
                            UserName = "john.doe",
                            FirstName = "John",
                            Image = "https://fastly.picsum.photos/id/237/200/200.jpg?hmac=zHUGikXUDyLCCmvyww1izLK3R3k8oRYBRiTizZEdyfI",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = "c7564854-eae4-41bc-b4bc-d9ed0758ba92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9cb36b07-0c13-4608-8548-eef3f823fd45",
                            Email = "sarah.smith@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "SARAH.SMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkxl8W68SJs8QS8isa1BeJZtCqVSOB5tlsB/rA8J1w4e0Lp3i5td7c3j0Em+bZCeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f54afd03-6441-4023-9e89-d145881f3918",
                            TwoFactorEnabled = false,
                            UserName = "sarah.smith",
                            FirstName = "Sarah",
                            Image = "https://fastly.picsum.photos/id/408/200/200.jpg?hmac=VJjKULX_XeyV5C9mbWyv6XTsG5EV-ZBsqbiQIi6xTeg",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = "8014824c-2c7d-4fb4-8f8e-ccb98dc32175",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0094a5e1-83ad-4542-b595-f981344e7234",
                            Email = "mike.jones@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKE.JONES@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.JONES",
                            PasswordHash = "AQAAAAEAACcQAAAAEAo6jDwztzJMfOf5BfQoHj+ECl51H2jmCywZ3g88yoS9ew9/AUSb7OQ/dR3kHDHRnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f76b2db0-5032-4f5e-b399-0eafeb3099f9",
                            TwoFactorEnabled = false,
                            UserName = "mike.jones",
                            FirstName = "Mike",
                            Image = "https://fastly.picsum.photos/id/256/200/200.jpg?hmac=MX3r8Dktr5b26lQqb5JB6sgLnCxSgt1KRm0F1eNDHCk",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = "1b4e5e8e-9a5a-45c8-b3d7-26a06aa64df6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de24979c-07b8-4db5-9da7-4727d2d3df40",
                            Email = "emily.williams@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "EMILY.WILLIAMS",
                            PasswordHash = "AQAAAAEAACcQAAAAEMxzAjtIpYIqaEHEjhlqJW23NUMMlwtD1QZHpyktxeKABnAYAl6AM83zkuONHkEwvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c260b5ed-b4ee-441c-b7d4-2a9282fa1683",
                            TwoFactorEnabled = false,
                            UserName = "emily.williams",
                            FirstName = "Emily",
                            Image = "https://fastly.picsum.photos/id/916/200/200.jpg?hmac=hEUrLG-ayFdIoyHKUwazT8SMEsVxWH9xGz4tx-e0cN0",
                            LastName = "Williams"
                        });
                });

            modelBuilder.Entity("Backend.Models.ChangeLog", b =>
                {
                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.HasOne("Backend.Models.TaskList", "TaskList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Backend.Models.UserTaskList", b =>
                {
                    b.HasOne("Backend.Models.AppUser", "AppUser")
                        .WithMany("AssignedTaskLists")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TaskList", "TaskList")
                        .WithMany("AssignedMembers")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Backend.Models.UserWorkLog", b =>
                {
                    b.HasOne("Backend.Models.AppUser", "AppUser")
                        .WithMany("LoggedWork")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("LoggedWork")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Backend.Models.WorkflowItem", b =>
                {
                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("WorkflowItems")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.Navigation("ChangeLogs");

                    b.Navigation("LoggedWork");

                    b.Navigation("WorkflowItems");
                });

            modelBuilder.Entity("Backend.Models.TaskList", b =>
                {
                    b.Navigation("AssignedMembers");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Backend.Models.AppUser", b =>
                {
                    b.Navigation("AssignedTaskLists");

                    b.Navigation("LoggedWork");
                });
#pragma warning restore 612, 618
        }
    }
}

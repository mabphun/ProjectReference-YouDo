// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240430095558_db-reseed-update3")]
    partial class dbreseedupdate3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Models.ChangeLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewAssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NewDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewPriority")
                        .HasColumnType("int");

                    b.Property<string>("NewTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewWorkflowItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldAssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OldDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("OldDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OldPriority")
                        .HasColumnType("int");

                    b.Property<string>("OldTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldWorkflowItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<float>("Estimated")
                        .HasColumnType("real");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("TaskListId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TaskListId");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = "0c04fb22-ea80-4157-827d-cb564d011034",
                            AssigneeId = "8372e5a4-9518-442b-9fb2-2368325a9195",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9861),
                            CreatorId = "8372e5a4-9518-442b-9fb2-2368325a9195",
                            Deadline = new DateTime(2024, 5, 4, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Finish writing the quarterly report for the management team.",
                            Estimated = 3f,
                            Priority = 1,
                            TaskListId = "f61321ff-c641-44bb-8f22-65b7c0f7151c",
                            Title = "Complete Report",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9861)
                        },
                        new
                        {
                            Id = "61c8f6cf-4eae-4916-b125-96832c915164",
                            AssigneeId = "073b8b41-492d-4071-818d-b31342988f80",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9878),
                            CreatorId = "8372e5a4-9518-442b-9fb2-2368325a9195",
                            Deadline = new DateTime(2024, 4, 30, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Conduct a thorough review of the recent code changes in the development branch and provide feedback.",
                            Estimated = 6f,
                            Priority = 2,
                            TaskListId = "f61321ff-c641-44bb-8f22-65b7c0f7151c",
                            Title = "Review Code Changes",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9878)
                        },
                        new
                        {
                            Id = "3a299af2-13d8-414b-bfa0-0e885868bcb4",
                            AssigneeId = "ec52561d-6e4b-414c-bb51-85e9a2de219f",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9890),
                            CreatorId = "995dedc8-1872-4244-880e-d191fb126117",
                            Deadline = new DateTime(2024, 5, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Follow up with the client regarding their recent inquiries and provide necessary assistance.",
                            Estimated = 1f,
                            Priority = 2,
                            TaskListId = "1487c99c-e1d7-4af4-8a01-7e5bc425e95c",
                            Title = "Call Client",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9891)
                        },
                        new
                        {
                            Id = "5abf1e04-7a51-428e-8313-64a501edc91c",
                            AssigneeId = "ec52561d-6e4b-414c-bb51-85e9a2de219f",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9915),
                            CreatorId = "995dedc8-1872-4244-880e-d191fb126117",
                            Deadline = new DateTime(2024, 5, 3, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Coordinate a meeting with the project team to discuss the upcoming milestones and action items.",
                            Estimated = 2f,
                            Priority = 2,
                            TaskListId = "1487c99c-e1d7-4af4-8a01-7e5bc425e95c",
                            Title = "Schedule Meeting",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9916)
                        },
                        new
                        {
                            Id = "60b06716-fbbf-4603-8f3f-23c4a479415e",
                            AssigneeId = "995dedc8-1872-4244-880e-d191fb126117",
                            CreatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9925),
                            CreatorId = "995dedc8-1872-4244-880e-d191fb126117",
                            Deadline = new DateTime(2024, 5, 9, 22, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Research current market trends and gather insights to inform strategic decisions for the next quarter.",
                            Estimated = 20f,
                            Priority = 0,
                            TaskListId = "1487c99c-e1d7-4af4-8a01-7e5bc425e95c",
                            Title = "Research Market Trends",
                            UpdatedAt = new DateTime(2024, 4, 30, 9, 55, 57, 422, DateTimeKind.Utc).AddTicks(9926)
                        });
                });

            modelBuilder.Entity("Backend.Models.TaskList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("TaskLists");

                    b.HasData(
                        new
                        {
                            Id = "f61321ff-c641-44bb-8f22-65b7c0f7151c",
                            CreatorId = "8372e5a4-9518-442b-9fb2-2368325a9195",
                            Description = "This list will contain programming tasks.",
                            Name = "Programming tasks"
                        },
                        new
                        {
                            Id = "1487c99c-e1d7-4af4-8a01-7e5bc425e95c",
                            CreatorId = "995dedc8-1872-4244-880e-d191fb126117",
                            Description = "This list will contain management type tasks.",
                            Name = "Management tasks"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("Backend.Models.UserTaskList", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskListId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppUserId", "TaskListId");

                    b.HasIndex("TaskListId");

                    b.ToTable("UserTaskLists");

                    b.HasData(
                        new
                        {
                            AppUserId = "8372e5a4-9518-442b-9fb2-2368325a9195",
                            TaskListId = "f61321ff-c641-44bb-8f22-65b7c0f7151c"
                        },
                        new
                        {
                            AppUserId = "8372e5a4-9518-442b-9fb2-2368325a9195",
                            TaskListId = "1487c99c-e1d7-4af4-8a01-7e5bc425e95c"
                        },
                        new
                        {
                            AppUserId = "995dedc8-1872-4244-880e-d191fb126117",
                            TaskListId = "f61321ff-c641-44bb-8f22-65b7c0f7151c"
                        },
                        new
                        {
                            AppUserId = "995dedc8-1872-4244-880e-d191fb126117",
                            TaskListId = "1487c99c-e1d7-4af4-8a01-7e5bc425e95c"
                        },
                        new
                        {
                            AppUserId = "073b8b41-492d-4071-818d-b31342988f80",
                            TaskListId = "f61321ff-c641-44bb-8f22-65b7c0f7151c"
                        },
                        new
                        {
                            AppUserId = "ec52561d-6e4b-414c-bb51-85e9a2de219f",
                            TaskListId = "1487c99c-e1d7-4af4-8a01-7e5bc425e95c"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserWorkLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("WorkTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("UserWorkLogs");

                    b.HasData(
                        new
                        {
                            Id = "59044778-b5ed-468e-b91e-eee65dfb879e",
                            AppUserId = "8372e5a4-9518-442b-9fb2-2368325a9195",
                            LogDate = new DateTime(2024, 4, 30, 9, 55, 57, 423, DateTimeKind.Utc).AddTicks(58),
                            TaskItemId = "0c04fb22-ea80-4157-827d-cb564d011034",
                            WorkTime = 36000000000L
                        },
                        new
                        {
                            Id = "526401b5-8d96-4ee6-99d0-52526c410fe3",
                            AppUserId = "073b8b41-492d-4071-818d-b31342988f80",
                            LogDate = new DateTime(2024, 4, 30, 9, 55, 57, 423, DateTimeKind.Utc).AddTicks(69),
                            TaskItemId = "61c8f6cf-4eae-4916-b125-96832c915164",
                            WorkTime = 72000000000L
                        });
                });

            modelBuilder.Entity("Backend.Models.WorkflowItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TaskItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("WorkflowItems");

                    b.HasData(
                        new
                        {
                            Id = "ed327d9b-155d-41d2-85c2-1556b2ed86d4",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "0c04fb22-ea80-4157-827d-cb564d011034"
                        },
                        new
                        {
                            Id = "8023a82c-9267-4236-bb1f-9a0883be164e",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "0c04fb22-ea80-4157-827d-cb564d011034"
                        },
                        new
                        {
                            Id = "e9c29d7f-fcb7-4d92-ad87-2f8c677e3dfb",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "61c8f6cf-4eae-4916-b125-96832c915164"
                        },
                        new
                        {
                            Id = "61849373-e1ac-4906-8416-c1b2ea9ce7cc",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "61c8f6cf-4eae-4916-b125-96832c915164"
                        },
                        new
                        {
                            Id = "2b615adf-cb07-417d-9da9-3f738454c363",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "3a299af2-13d8-414b-bfa0-0e885868bcb4"
                        },
                        new
                        {
                            Id = "f280826a-b731-4361-841c-2a5eeaaf2092",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "3a299af2-13d8-414b-bfa0-0e885868bcb4"
                        },
                        new
                        {
                            Id = "ccc9411e-73d5-4fcc-bb05-779a3912e0ee",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "5abf1e04-7a51-428e-8313-64a501edc91c"
                        },
                        new
                        {
                            Id = "5ad33c97-6441-4f63-baaa-4cfaba922a22",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "5abf1e04-7a51-428e-8313-64a501edc91c"
                        },
                        new
                        {
                            Id = "ba0619c5-6894-48ef-b675-368f8a3fd61e",
                            IsActive = true,
                            IsDeletable = false,
                            Name = "To Do",
                            Order = 0,
                            TaskItemId = "60b06716-fbbf-4603-8f3f-23c4a479415e"
                        },
                        new
                        {
                            Id = "52bb6584-d3a4-413f-98ae-c81cdc082db2",
                            IsActive = false,
                            IsDeletable = false,
                            Name = "Done",
                            Order = 100,
                            TaskItemId = "60b06716-fbbf-4603-8f3f-23c4a479415e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "8372e5a4-9518-442b-9fb2-2368325a9195",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a453dab-5be4-4180-a586-014d201c6601",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOY1uW80PWa1U1HnG3MU7W4VGkVwUCRdtcfIR2lzLYKYnaoTxpYLjxA+DU8JTp9AjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d500a96-3542-4448-a967-6ff5484363af",
                            TwoFactorEnabled = false,
                            UserName = "john.doe",
                            FirstName = "John",
                            Image = "https://fastly.picsum.photos/id/237/200/200.jpg?hmac=zHUGikXUDyLCCmvyww1izLK3R3k8oRYBRiTizZEdyfI",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = "995dedc8-1872-4244-880e-d191fb126117",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2ff6f28-af7c-4e64-96f1-93298a329320",
                            Email = "sarah.smith@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "SARAH.SMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAENOaUMVeqQnpLrqSUhCT9HTKAVHhRCV0rygTcVPudgrQe55ngkQkfuyd+K31NfymKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6dd061d-079d-4432-bd35-c53f2eb5fc19",
                            TwoFactorEnabled = false,
                            UserName = "sarah.smith",
                            FirstName = "Sarah",
                            Image = "https://fastly.picsum.photos/id/408/200/200.jpg?hmac=VJjKULX_XeyV5C9mbWyv6XTsG5EV-ZBsqbiQIi6xTeg",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = "073b8b41-492d-4071-818d-b31342988f80",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ad9a820-898d-469e-a3eb-e5c4ec654158",
                            Email = "mike.jones@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKE.JONES@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.JONES",
                            PasswordHash = "AQAAAAEAACcQAAAAEHbmXSmxHp5fi2mdsHRvlVDnrJKbvmkrgjNiNFtuZ/mnEBlIEwPfHbmjYuTfCWYXJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7669a288-d3ff-401a-b6ce-ab74f54ae11a",
                            TwoFactorEnabled = false,
                            UserName = "mike.jones",
                            FirstName = "Mike",
                            Image = "https://fastly.picsum.photos/id/256/200/200.jpg?hmac=MX3r8Dktr5b26lQqb5JB6sgLnCxSgt1KRm0F1eNDHCk",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = "ec52561d-6e4b-414c-bb51-85e9a2de219f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea53857c-31bb-4cd2-89d6-1ccc64e2cb5f",
                            Email = "emily.williams@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.WILLIAMS@EXAMPLE.COM",
                            NormalizedUserName = "EMILY.WILLIAMS",
                            PasswordHash = "AQAAAAEAACcQAAAAEAbUKSsfj2fgp48b+WVf5gQtQQG2uhtktHNnXUz4tkfZOls7D7PIoJ+uNYDE5X6plg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94974b30-eb4d-4416-b367-299a40cd607c",
                            TwoFactorEnabled = false,
                            UserName = "emily.williams",
                            FirstName = "Emily",
                            Image = "https://fastly.picsum.photos/id/916/200/200.jpg?hmac=hEUrLG-ayFdIoyHKUwazT8SMEsVxWH9xGz4tx-e0cN0",
                            LastName = "Williams"
                        });
                });

            modelBuilder.Entity("Backend.Models.ChangeLog", b =>
                {
                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.HasOne("Backend.Models.TaskList", "TaskList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Backend.Models.UserTaskList", b =>
                {
                    b.HasOne("Backend.Models.AppUser", "AppUser")
                        .WithMany("AssignedTaskLists")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TaskList", "TaskList")
                        .WithMany("AssignedMembers")
                        .HasForeignKey("TaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Backend.Models.UserWorkLog", b =>
                {
                    b.HasOne("Backend.Models.AppUser", "AppUser")
                        .WithMany("LoggedWork")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("LoggedWork")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Backend.Models.WorkflowItem", b =>
                {
                    b.HasOne("Backend.Models.TaskItem", "TaskItem")
                        .WithMany("WorkflowItems")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.TaskItem", b =>
                {
                    b.Navigation("ChangeLogs");

                    b.Navigation("LoggedWork");

                    b.Navigation("WorkflowItems");
                });

            modelBuilder.Entity("Backend.Models.TaskList", b =>
                {
                    b.Navigation("AssignedMembers");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Backend.Models.AppUser", b =>
                {
                    b.Navigation("AssignedTaskLists");

                    b.Navigation("LoggedWork");
                });
#pragma warning restore 612, 618
        }
    }
}
